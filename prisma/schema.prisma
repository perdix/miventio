// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organisation users that manage the organisation
model User {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  email      String @unique
  password  String?
  organisations Role[]
}

// Depending on the role, the users have different rights/roles
model Role {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role String
  userId String
  user User @relation(fields: [userId], references: [id])
  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id])
  @@id([userId, organisationId])
}

// Central entity of the platform. An organisation might have contacts and events
model Organisation {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name       String @unique
  description String?
  color String?
  events Event[]
  users Role[]
  contacts Contact[]
}

// Contacts/members of the organisation
model Contact {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  oegbId String?
  efpId String?
  zaekId String?
  firstName String
  lastName  String
  gender String?
  prefix  String?
  postfix String?
  email      String
  password  String?
  phone      String?
  address   String?
  postcode  String?
  city      String?
  website String?
  company String?
  notes   String?
  newsletterConfirmation DateTime?
  retiredAt DateTime?
  membershipStartedAt DateTime?
  membershipEndedAt DateTime?
  role String? // like a special title, internal role. Is not related to the user's role
  gdprConfirmation DateTime?
  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id])
  visitors Visitor[]
  membershipTickets MembershipTicket[]
  membershipId String?
  membership Membership? @relation(fields: [membershipId], references: [id])
  @@unique([firstName, lastName, email])
}

model Membership{
  id  String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String?
  price Float @default(0)
  membershipTickets MembershipTicket[]
  contacts Contact[]
}

// A membership ticket is valid for a given year
model MembershipTicket {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  year String?
  membershipId String
  membership Membership @relation(fields: [membershipId], references: [id])
  price Float @default(0)
  prescribedAt DateTime?
  paidAt DateTime?
  contactId String
  contact Contact @relation(fields: [contactId], references: [id])
}

model Event {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name       String
  shortName String?
  description String?
  start DateTime?
  end DateTime?
  location String?
  city String?
  address String?
  postcode String?
  website String?
  bookingStart DateTime?
  bookingEnd DateTime?
  visitorCategories VisitorCategory[]
  activities Activity[]
  bookings Booking[]
  eventTickets EventTicket[]
  visitors Visitor[]
  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id])
}

// To book
model EventTicket {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name  String
  price Float? @default(0)
  validFrom DateTime
  validTo DateTime
  visitorCategoryId String?
  visitorCategory VisitorCategory? @relation(fields: [visitorCategoryId], references: [id])
  date DateTime?
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  visitors Visitor[]
}

// Each event can have several activities/subevents
model Activity {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name       String
  description String?
  date DateTime
  start DateTime?
  end DateTime?
  limit Int?
  location String?
  room String?
  speaker String?
  abstract String?
  sponsor String?
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  credits Float?
  logo String?
  type String? // Can be choosen freely. E.g. workshop, lecture, party, ...
  activityTickets ActivityTicket[]
  visitors Visitor[]
}

model ActivityTicket {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String?
  description String?
  visitorCategoryId String
  visitorCategory VisitorCategory @relation(fields: [visitorCategoryId], references: [id])
  activityId String
  activity Activity @relation(fields: [activityId], references: [id])
  visitors Visitor[]
  price Float @default(0)
}

// A booking is a complete order to access an event with one or several visitors
model Booking {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName String
  email String
  address String
  postcode String
  city String
  phone String?
  status String @default("CREATED")
  price Float
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  visitors Visitor[]
}

// The booking contains one or many visitors. A visitor is like an item of the booking.
model Visitor {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status String? @default("RESERVED")
  price Float
  eventTicketPrice Float
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  eventTicketId String?
  eventTicket EventTicket? @relation(fields: [eventTicketId], references: [id])
  activitiesTicketsPrices Json // A list of all ticket prices of the selected activity tickets
  activities Activity[]
  activitiesTickets ActivityTicket[]
  bookingId String
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  email String
  contactId String?
  contact Contact? @relation(fields: [contactId], references: [id])
  categoryId String
  category VisitorCategory @relation(fields: [categoryId], references: [id])
}

model VisitorCategory {
  id  String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  isContact Boolean @default(false)
  visitors Visitor[]
  eventTickets EventTicket[]
  activityTickets ActivityTicket[]
  eventId String
  event Event @relation(fields: [eventId], references: [id])
}