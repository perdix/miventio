// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Superuser {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  last_login DateTime?
  email      String @unique
  password  String?
  organisations Role[]
}

model User {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  last_login DateTime?
  first_name String?
  last_name  String?
  title     String?
  email      String
  password  String?
  phone      String?
  address   String?
  postcode  String?
  city      String?
  type    String?
  notes   String?
  status String?
  organisation_id String
  organisation Organisation @relation(fields: [organisation_id], references: [id])
  visits Visit[]
  @@unique([first_name, last_name, email])
}

model Role {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  role String
  superuser_id String
  superuser Superuser @relation(fields: [superuser_id], references: [id])
  organisation_id String
  organisation Organisation @relation(fields: [organisation_id], references: [id])
  @@id([superuser_id, organisation_id])
}

model Organisation {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String @unique
  slug       String?
  description String?
  color String?
  events Event[]
  superusers Role[]
  users User[]
}


model Event {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  slug       String?
  description String?
  start DateTime?
  end DateTime?
  date DateTime?
  location String?
  city String?
  address String?
  postcode String?
  status String?
  activities Activity[]
  bookings Booking[]
  tickets Ticket[]
  visits Visit[]
  organisation_id String
  organisation Organisation @relation(fields: [organisation_id], references: [id])
}


model Activity {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  description String?
  start DateTime?
  end DateTime?
  limit Int?
  location String?
  author String?
  price Float? @default(0)
  event_id String
  category String?
  event Event @relation(fields: [event_id], references: [id])
  visits Visit[]
}

// Order:
model Booking {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  first_name String
  last_name String
  address String
  postcode String
  city String
  email String
  phone String?
  status String
  price Float
  event_id String
  event Event @relation(fields: [event_id], references: [id])
  visits Visit[]
}

model Visit {
  id  String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status String? @default("ANGEMELDET")
  price Float
  ticket_price Float
  activities_prices Json
  booking_id String
  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  user_id String
  user User @relation(fields: [user_id], references: [id])
  event_id String
  event Event @relation(fields: [event_id], references: [id])
  ticket_id String?
  ticket Ticket? @relation(fields: [ticket_id], references: [id])
  activities Activity[]
}

model Ticket {
  id        String  @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  description String?
  price Float? @default(0)
  category String?
  date DateTime?
  event_id String
  event Event @relation(fields: [event_id], references: [id])
  visits Visit[]
}